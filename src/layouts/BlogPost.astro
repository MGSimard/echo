---
import type { CollectionEntry } from "astro:content";
import BaseHead from "@/components/BaseHead.astro";
import Footer from "@/components/Footer.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import Header from "@/components/Header.astro";
import type { MarkdownHeading } from "astro";
// import ScreenGlow from '@/components/ScreenGlow.astro';

type Props = CollectionEntry<"blog">["data"] & { headings: MarkdownHeading[] };

const { title, description, pubDate, updatedDate, heroImage, headings } = Astro.props as Props;
const filteredHeadings = headings.filter((heading) => heading.depth === 2 || heading.depth === 3);

// Hierarchical TOC structure with h2 & nested h3 headings
const tocHeadings: (MarkdownHeading & { children: MarkdownHeading[] })[] = [];
let currentDepth2: (MarkdownHeading & { children: MarkdownHeading[] }) | null = null;

for (const heading of filteredHeadings) {
  if (heading.depth === 2) {
    currentDepth2 = { ...heading, children: [] };
    tocHeadings.push(currentDepth2);
  } else if (heading.depth === 3 && currentDepth2) {
    currentDepth2.children.push(heading);
  }
}
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>

  <body>
    <!-- <ScreenGlow /> -->
    <Header />
    <main>
      <div class="gutter" aria-hidden="true"><!-- Fill Gutter --></div>
      <article>
        {heroImage && <img src={heroImage.src} alt="" class="hero-image" decoding="async" fetchpriority="high" />}
        <div class="prose">
          <header class="title">
            <h1>{title}</h1>
            <span class="date">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <span class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </span>
                )
              }
            </span>
            <hr />
          </header>
          <slot />
        </div>
      </article>
      <aside class="gutter">
        <!-- Table of Contents -->
        <nav id="toc">
          toc

          {
            tocHeadings && (
              <ol>
                {tocHeadings.map((heading) => (
                  <li>
                    <a href={`#${heading.slug}`}>{heading.text}</a>
                    {heading.children.length > 0 && (
                      <ol>
                        {heading.children.map((child) => (
                          <li>
                            <a href={`#${child.slug}`}>{child.text}</a>
                          </li>
                        ))}
                      </ol>
                    )}
                  </li>
                ))}
              </ol>
            )
          }
        </nav>
      </aside>
    </main>
    <Footer />
  </body>
</html>
